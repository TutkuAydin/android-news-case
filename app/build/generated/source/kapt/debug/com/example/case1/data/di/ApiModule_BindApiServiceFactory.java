// Generated by Dagger (https://dagger.dev).
package com.example.case1.data.di;

import com.example.case1.data.apiservice.APIRequest;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApiModule_BindApiServiceFactory implements Factory<APIRequest> {
  private final ApiModule module;

  private final Provider<Retrofit> retrofitProvider;

  public ApiModule_BindApiServiceFactory(ApiModule module, Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public APIRequest get() {
    return bindApiService(module, retrofitProvider.get());
  }

  public static ApiModule_BindApiServiceFactory create(ApiModule module,
      Provider<Retrofit> retrofitProvider) {
    return new ApiModule_BindApiServiceFactory(module, retrofitProvider);
  }

  public static APIRequest bindApiService(ApiModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNull(instance.bindApiService(retrofit), "Cannot return null from a non-@Nullable @Provides method");
  }
}

// Generated by Dagger (https://dagger.dev).
package com.example.case1.viewmodels;

import com.example.case1.domain.usecases.GetArticles;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<GetArticles> articleUseCaseProvider;

  public MainViewModel_Factory(Provider<GetArticles> articleUseCaseProvider) {
    this.articleUseCaseProvider = articleUseCaseProvider;
  }

  @Override
  public MainViewModel get() {
    return newInstance(articleUseCaseProvider.get());
  }

  public static MainViewModel_Factory create(Provider<GetArticles> articleUseCaseProvider) {
    return new MainViewModel_Factory(articleUseCaseProvider);
  }

  public static MainViewModel newInstance(GetArticles articleUseCase) {
    return new MainViewModel(articleUseCase);
  }
}
